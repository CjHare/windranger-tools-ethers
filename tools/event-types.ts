/* A portion of ethers autogenerated types to avoid dependency on actual typechain folder */
/* tslint:disable */
/* eslint-disable */
import type { Event, EventFilter } from "ethers";

export interface TypedEvent<
  TArgsArray extends Array<any> = any,
  TArgsObject = any
> extends Event {
  args: TArgsArray & TArgsObject;
}

export interface TypedEventFilter<_TEvent extends TypedEvent>
  extends EventFilter {}

export type PromiseOrValue<T> = T | Promise<T>;

export type EventFilters = {[name: string]: (...args: Array<any>) => EventFilter}
